{
  "title": "AutoLaistymas REST API",
  "version": "1.0.0",
  "baseUrl": "http://192.168.4.1",
  "description": "ESP32 vietinės automatinio laistymo sistemos API. Serveris veikia SoftAP režimu be interneto.",
  "endpoints": [
    {
      "method": "GET",
      "path": "/status",
      "description": "Grąžina dabartinę sistemos būseną ir sensorių reikšmes.",
      "response": {
        "contentType": "application/json",
        "example": {
          "state": "Idle | WindowOpen | Watering | ErrorPaused",
          "currentTime": "2025-08-10T21:33:34",
          "temp": 23.5,
          "hum": 45.2,
          "pres": 1005.1,
          "waterLevel": "OK | MIN",
          "remainingTimeSec": 120
        }
      }
    },
    {
      "method": "GET",
      "path": "/config",
      "description": "Grąžina einamąją konfigūraciją iš atminties.",
      "response": {
        "contentType": "application/json",
        "example": {
          "time": "2025-05-08T08:00:00",
          "wateringDurationMin": 60,
          "toleranceWindowMin": 120,
          "sensorReadIntervalMs": 1000,
          "pauseResumeCheckIntervalMs": 1000,
          "waterLevel": {
            "minState": "HIGH",
            "debounceSamples": 5,
            "debounceIntervalMs": 50,
            "pullMode": "PULLUP"
          },
          "bme280": {
            "tempMin": 5.0,
            "tempMax": 35.0,
            "humMin": 30.0,
            "humMax": 80.0,
            "presMin": 950.0,
            "presMax": 1050.0
          },
          "wifi": {
            "apSsid": "AutoLaistymas",
            "apPassword": "esp32automatinis",
            "apChannel": 1,
            "apHidden": false
          }
        }
      }
    },
    {
      "method": "POST",
      "path": "/config",
      "description": "Atnaujina konfigūraciją. Kūnas – JSON. (Pastaba: dabartinėje versijoje svarbu siųsti vienu gabalu)",
      "request": {
        "contentType": "application/json",
        "body": "Toks pat formatas kaip GET /config pavyzdyje. Bent vienas laukas privalomas."
      },
      "responses": [
        {
          "status": 200,
          "description": "Konfigūracija atnaujinta ir įrašyta į LittleFS."
        },
        {
          "status": 400,
          "description": "Neteisingas JSON arba reikšmės."
        }
      ]
    },
    {
      "method": "POST",
      "path": "/config/time",
      "description": "Nustato RTC laiką ir išsaugo config.time.",
      "request": {
        "contentType": "application/json",
        "example": { "time": "2025-08-10T21:33:34" }
      },
      "responses": [
        { "status": 200, "description": "RTC laikas atnaujintas." },
        { "status": 400, "description": "Blogas laiko formatas." }
      ]
    },
    {
      "method": "GET",
      "path": "/start",
      "description": "Rankiniu būdu pradeda laistymą, jei tenkinamos sąlygos (vanduo, BME ribos).",
      "responses": [
        { "status": 200, "description": "Laistymas pradėtas." },
        { "status": 409, "description": "Sąlygos netenkinamos arba jau vyksta laistymas." }
      ]
    },
    {
      "method": "GET",
      "path": "/stop",
      "description": "Sustabdo vykstantį laistymą.",
      "responses": [
        { "status": 200, "description": "Laistymas sustabdytas." },
        { "status": 409, "description": "Nėra ką stabdyti." }
      ]
    },
    {
      "method": "GET",
      "path": "/ui/*",
      "description": "Statiniai UI failai iš LittleFS (/ui/index.html, /ui/main.js, /ui/styles.css).",
      "note": "Serveris: server.serveStatic(\"/ui\", LittleFS, \"/ui/\").setDefaultFile(\"index.html\");"
    }
  ],
  "notes": [
    "Jei RTC prarado galią, sistema bandys nustatyti laiką iš config.time per paleidimą.",
    "Debounce apsaugos: debounceSamples karpomas į [1..MAX_DEBOUNCE_SAMPLES].",
    "Laistymas paleidžiamas kartą per dieną, kai dabartinis laikas >= nustatytam laistymo laikui.",
    "ErrorPaused būsenoje relė išjungiama; periodiškai tikrinamos sąlygos grįžimui į Idle."
  ]
}
